// CSR形式で圧縮されたニューラルネットワークパラメータ
// 重み用プルーニング閾値: 0.0015
// バイアス用プルーニング閾値: 1e-06
// 自動生成ファイル - 手動編集禁止
#ifndef MODEL_PARAMETERS_CSR_H
#define MODEL_PARAMETERS_CSR_H

#include <stdint.h>
#ifdef ARDUINO
#include <avr/pgmspace.h>
#define CSR_PROGMEM PROGMEM
#else
#define CSR_PROGMEM
#endif


// weight_1 - CSR形式
// 元サイズ: 120, 非ゼロ要素: 73, 圧縮率: 39.2%
const float weight_1_values[] CSR_PROGMEM = {
    -0.68219560f, -0.50858778f, 0.56946146f, -0.00226676f, 0.64952898f, -1.59537756f, -0.01758291f, 1.53028977f, 
    0.32304755f, 0.00168235f, -0.00181681f, 0.00177281f, 0.00239145f, -0.00330174f, -0.00215769f, 0.00446893f, 
    -0.00198369f, 0.00150782f, 0.00159996f, 0.00309798f, 1.26094985f, -1.51826119f, -0.25031981f, 0.01286293f, 
    -1.08738303f, 0.72569734f, -1.12130320f, -0.00327204f, 0.15621535f, 1.49747992f, -0.33798373f, -1.10529602f, 
    -1.30050433f, -0.43942091f, 0.00231931f, -0.00329990f, 0.89822918f, -1.21372044f, 0.13430263f, 0.00305675f, 
    -0.00173941f, 0.00154076f, -0.00167435f, -0.00188715f, 1.06565046f, 0.18295872f, -1.05515981f, -0.13071986f, 
    -0.80369443f, -0.74338353f, 0.00221597f, -0.00177933f, 1.48198092f, -1.58713591f, -0.51783961f, -0.00211264f, 
    -0.00176411f, -0.00213027f, -0.00263898f, 0.00635040f, 0.57670110f, 0.32298848f, -0.86284029f, -0.00199994f, 
    -0.00185686f, -0.00176135f, -0.26710689f, -0.09287265f, -1.39800131f, -0.00209130f, -1.09269273f, 0.13645086f, 
    0.97478151f
};

const int32_t weight_1_indices[] CSR_PROGMEM = {
    0, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 2, 
    0, 0, 1, 0, 2, 2, 1, 2, 0, 1, 2, 2, 
    0, 1, 2, 0, 0, 1, 2, 0, 1, 2, 1, 1, 
    0, 1, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 
    1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 2, 
    0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 1, 
    2
};

const int32_t weight_1_indptr[] CSR_PROGMEM = {
    0, 3, 4, 6, 9, 10, 12, 13, 15, 17, 18, 19, 
    20, 23, 23, 24, 27, 28, 31, 34, 35, 36, 39, 40, 
    41, 41, 44, 44, 47, 50, 52, 55, 58, 58, 60, 60, 
    63, 66, 69, 70, 73
};

// bias_1 - CSR形式
// 元サイズ: 40, 非ゼロ要素: 40, 圧縮率: 0.0%
const float bias_1_values[] CSR_PROGMEM = {
    0.46476138f, -0.00562266f, 0.06005341f, -0.48058367f, -0.47286254f, -0.20100871f, -0.25460306f, -0.14265560f, 
    -0.23313260f, -0.27543497f, -0.42305571f, -0.12159453f, 0.30439621f, -0.00286909f, -0.13181970f, 0.35532397f, 
    -0.03063783f, -0.75622517f, 0.49266618f, -0.09274265f, -0.18560885f, 0.37899414f, -0.00628373f, -0.25388238f, 
    -0.00546254f, -0.57081741f, -0.42494145f, 0.15333216f, 0.07354447f, -0.51368493f, 0.03807738f, -0.05387320f, 
    -0.00250488f, -0.41103595f, -0.25805941f, -0.00770444f, -0.01403541f, 0.69390583f, -0.46122247f, 0.09568842f
};

const int32_t bias_1_indices[] CSR_PROGMEM = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
    12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
    24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 37, 38, 39
};

// weight_2 - CSR形式
// 元サイズ: 1600, 非ゼロ要素: 517, 圧縮率: 67.7%
const float weight_2_values[] CSR_PROGMEM = {
    -0.84942955f, -0.00161256f, 1.61574841f, -0.00185139f, -0.00261607f, 0.28490415f, -0.24020198f, -1.06150293f, 
    -0.21269226f, -0.00170827f, 0.00150801f, 0.11022837f, 0.00431078f, 0.64828348f, 0.00177904f, 0.18727803f, 
    0.31704491f, 0.00156118f, 0.26238471f, 0.00185531f, -0.00638797f, -0.00201177f, 0.00216233f, 0.00246255f, 
    0.00214420f, -0.00194210f, -0.00261297f, 0.00194209f, 0.00250319f, 0.00239324f, 0.00215577f, -0.00250707f, 
    -0.00463887f, -0.00195826f, -0.00244869f, -0.00270079f, 0.00161355f, -0.00165960f, -0.00164577f, 0.00246513f, 
    -0.00204820f, -0.00394134f, 0.00161971f, -0.00169862f, -0.00160464f, 0.00169485f, -0.00352557f, 0.00234612f, 
    -0.00444800f, 0.00157501f, 0.00164859f, -0.00172061f, 0.00206277f, 0.00302283f, 0.10925598f, -0.00241659f, 
    0.02651464f, 0.00237952f, 0.20294972f, -0.00158226f, -0.01406226f, 0.71443862f, -0.16277319f, -1.72269404f, 
    0.15118130f, -0.22153953f, 0.00464244f, 0.41895825f, -0.00173459f, -0.00150575f, 0.00334105f, 0.00205648f, 
    0.00204635f, -0.00234395f, 0.00367165f, 0.00213300f, 0.00284669f, -0.00219603f, 0.00250109f, -0.00462900f, 
    0.00170703f, 0.00240866f, 0.00187130f, -0.00332226f, -0.00222593f, 0.00309256f, 0.00364594f, -0.00151517f, 
    -0.00150540f, -0.00180128f, 0.00169464f, -0.00191630f, 0.00178959f, 0.00270186f, -0.00160119f, 0.00341627f, 
    -0.00311910f, 0.00238124f, 0.00234604f, 0.00151831f, 0.00199416f, 0.00399064f, 0.00309593f, -0.00157702f, 
    0.00224303f, -0.00169276f, 0.00459917f, 0.00261300f, -0.00171697f, 0.00254372f, -0.00165687f, -0.00225108f, 
    -0.00181195f, -0.00194716f, -0.00225815f, -0.00158837f, 0.00221317f, 0.00166245f, 0.00406357f, -0.00268354f, 
    -0.00199460f, 0.00229190f, -0.00151039f, -0.00255132f, 0.00161848f, 0.00330011f, -0.18505923f, 0.45525765f, 
    0.00181008f, -0.00249686f, 0.00238939f, -0.00213144f, 0.00180802f, -0.00168730f, 0.00215472f, -1.20783591f, 
    -0.26674128f, -0.00179253f, 0.00260573f, -0.00378032f, -0.00258537f, -0.00363714f, -0.00161362f, 0.00166593f, 
    -0.00255418f, 0.00193673f, 0.00214765f, 0.00201601f, -0.00204905f, 0.00207769f, 0.00163344f, 0.00357367f, 
    -0.00172185f, 0.00223154f, -0.00220158f, -0.00217435f, -0.00240003f, -0.00154205f, 0.00174446f, 0.00206557f, 
    -0.00193013f, -0.00172858f, 0.00183743f, 0.50385529f, 0.46294779f, -0.26281738f, 0.31786814f, 0.00327075f, 
    -0.05182449f, -1.27922380f, 0.00163629f, -0.00162261f, -0.01433210f, -0.00175753f, 0.00378851f, 0.15344764f, 
    -0.00154198f, -0.00328724f, -0.00228236f, 0.12816289f, 0.10986364f, -0.00291551f, 0.00215835f, 0.00268044f, 
    0.00473337f, -0.00240924f, -0.00245238f, 0.00236816f, 0.00189837f, 0.00161581f, 0.00326118f, 0.00177538f, 
    -0.00156951f, 0.00222250f, 0.00163946f, -0.00248485f, 0.00191864f, -0.00204407f, 0.00651432f, -0.00185404f, 
    0.00218489f, 0.00161929f, 0.02225542f, -1.05596828f, 0.26523259f, -0.00320763f, -1.58565521f, -0.00283611f, 
    -0.37997261f, -0.54642248f, 0.17813994f, -0.00310057f, 0.82252967f, 0.00162699f, 0.00368076f, -0.83922648f, 
    -0.00173809f, 1.03545022f, -0.00989156f, 0.80888408f, -0.40933469f, -0.00216734f, 0.00181320f, -0.00181303f, 
    -0.00192501f, -0.00215796f, -0.00360281f, -0.00474690f, 0.00181081f, 0.00200707f, 0.00215379f, 0.00268379f, 
    -0.00186960f, -0.00262504f, 0.00198300f, 0.00194813f, -0.00362503f, 0.00217955f, 0.00184854f, 0.00174484f, 
    -0.00156547f, 0.00236977f, 0.00177104f, 0.00250053f, -0.00184297f, 0.00186541f, 0.00263941f, 0.00165498f, 
    -0.00248141f, 0.00295651f, 0.00162940f, -0.00402653f, 0.00173657f, 0.00369762f, -0.00178895f, -0.00184953f, 
    0.00163466f, 0.00166008f, -0.00182302f, -0.00311231f, -0.00190897f, 0.00159516f, -0.00166153f, 0.00204455f, 
    -0.00409503f, -0.00310171f, -0.00246511f, 0.00229294f, -0.00231142f, -0.00332185f, -0.00216184f, -0.00255399f, 
    0.00312544f, 0.00280520f, -0.00204051f, 0.00407991f, -0.00224708f, -0.00163010f, -0.00225292f, -0.00262983f, 
    0.00206242f, 0.00193863f, -0.00160329f, -0.00443447f, -0.00420773f, 0.00215875f, 0.00243788f, 0.00248833f, 
    -0.00215836f, -0.00188062f, 0.00247446f, -0.00216714f, 0.00416770f, -0.00418348f, -0.00174321f, -0.00204546f, 
    0.00427505f, -0.00311505f, 0.00228608f, 0.00184699f, -0.00154026f, -0.00162700f, 0.00259385f, 0.00151277f, 
    0.00370844f, -0.00189867f, -0.00463674f, -0.00380984f, -0.00214326f, -0.00271431f, -0.00360996f, 0.00153651f, 
    -0.00151833f, -0.00210365f, -0.00286081f, 0.00270889f, 0.00368898f, 0.00191231f, -0.00311359f, -0.00156681f, 
    0.00427050f, 0.00215789f, 0.00475044f, -0.00245208f, 0.00285031f, 0.00220974f, 0.00162746f, 0.00297206f, 
    0.00170032f, 0.00168979f, -0.00181929f, 0.00157712f, -0.00242183f, -0.00228620f, 0.00166495f, -0.00178322f, 
    -0.00174954f, 0.00276508f, -0.00348096f, -0.00372263f, -0.00201388f, -0.00391147f, -0.00351981f, -0.00388729f, 
    0.00191978f, -0.00328065f, 0.00357397f, -0.00176128f, 0.00176725f, -0.00152403f, 0.00213883f, 0.00241593f, 
    -0.00151523f, 0.00168658f, 0.00171388f, 0.00383330f, -0.00224396f, 0.00311054f, -0.00322847f, -0.00178908f, 
    -0.00219793f, -0.00201560f, 0.00211436f, 0.00179113f, 0.00161635f, -0.00358812f, 0.00261743f, 0.00391816f, 
    0.41414943f, 0.00181899f, -0.00161276f, 0.15703501f, 0.01289383f, 0.00184237f, -0.00171567f, -0.03333037f, 
    0.00190890f, -0.19092885f, 0.00171050f, -0.24585299f, -0.37807858f, 0.00221934f, -0.40269318f, -0.00328812f, 
    0.00240180f, 0.00264719f, 0.00348114f, -0.00300620f, 0.00159789f, 0.00326566f, -0.00283095f, 0.52498215f, 
    0.45697394f, -0.00194539f, 0.00729528f, -0.00150845f, 0.10715163f, 0.02382162f, 0.00262986f, -0.00265750f, 
    0.00187421f, 0.00198486f, -0.38604069f, 0.49158645f, -0.00271363f, -0.05618916f, -0.00186222f, -0.70586652f, 
    0.11052373f, -0.00434999f, -0.04544617f, 0.00380081f, -0.00179879f, -0.00255573f, 0.00163412f, 0.00176730f, 
    0.00240941f, 0.00359722f, -0.00638760f, 0.00185921f, -0.00269028f, -0.00361138f, 0.00247333f, 0.00241463f, 
    -0.00185253f, -0.00208465f, 0.00246513f, -0.00235517f, -0.00158721f, 0.00165070f, 0.00474896f, 0.00284967f, 
    -0.05945400f, -0.32515490f, -0.59971511f, 0.00228420f, -1.30390584f, 0.00193676f, 0.62069964f, 0.59275949f, 
    -0.00305518f, 0.74093634f, -0.00161108f, -0.00226324f, 0.29152593f, 1.08463550f, -0.00329433f, -0.00154020f, 
    -1.23978889f, -0.62611645f, -0.00157066f, 0.00173640f, -0.00329111f, -0.00343776f, -0.00286936f, 0.00428904f, 
    -0.00240295f, 0.00168032f, -0.00293703f, 0.00332113f, -0.00199844f, -0.00217631f, 0.00177007f, 0.00164109f, 
    0.00162395f, -0.00165964f, 0.00187116f, -0.00255653f, 0.00151181f, -0.00282523f, 0.00186717f, 0.00276953f, 
    -0.00236572f, -0.00224365f, 0.00176980f, 0.41867301f, -0.00153386f, -0.13734801f, 0.16814786f, 0.00195820f, 
    0.14431019f, -0.49645057f, -2.22348022f, -0.45010096f, 0.17180836f, -0.00204462f, 0.00194876f, 0.23411041f, 
    0.00276218f, -0.55704862f, -0.50779563f, -0.08549780f, 0.07219272f, -0.00174332f, 0.00192788f, 0.00286666f, 
    -0.00360452f, -0.00252887f, -0.00254662f, -0.00224879f, 0.00218284f, 0.00175332f, 0.00298930f, -0.00154607f, 
    0.00283333f, -0.00247365f, 0.00174756f, 0.00258923f, 0.00203205f, 0.00162889f, 0.00177113f, 0.00235639f, 
    -0.00164842f, 0.00309912f, 0.00162223f, -0.00184134f, 0.00187159f
};

const int32_t weight_2_indices[] CSR_PROGMEM = {
    0, 2, 3, 4, 9, 12, 15, 17, 21, 22, 25, 27, 
    29, 30, 32, 35, 37, 38, 39, 5, 10, 12, 14, 17, 
    22, 24, 26, 27, 28, 34, 39, 0, 6, 8, 14, 18, 
    20, 24, 25, 27, 30, 31, 34, 39, 4, 9, 13, 17, 
    18, 20, 23, 24, 29, 30, 0, 2, 3, 6, 15, 16, 
    17, 18, 21, 27, 28, 30, 37, 39, 0, 8, 11, 13, 
    23, 26, 27, 31, 35, 39, 0, 5, 6, 7, 10, 12, 
    38, 39, 6, 14, 25, 29, 30, 37, 38, 39, 5, 8, 
    10, 20, 22, 24, 25, 26, 28, 33, 39, 2, 5, 13, 
    15, 16, 18, 19, 31, 35, 37, 1, 7, 11, 13, 15, 
    18, 19, 21, 28, 29, 38, 0, 3, 4, 9, 11, 12, 
    15, 18, 20, 21, 27, 34, 37, 38, 39, 4, 6, 8, 
    14, 15, 16, 17, 25, 38, 0, 1, 3, 4, 9, 10, 
    12, 15, 22, 29, 34, 39, 1, 2, 3, 12, 15, 16, 
    17, 18, 19, 20, 21, 23, 25, 27, 31, 32, 33, 37, 
    39, 1, 3, 4, 12, 18, 19, 20, 21, 23, 25, 38, 
    39, 9, 11, 16, 20, 23, 25, 26, 27, 38, 0, 2, 
    3, 10, 12, 13, 15, 17, 18, 20, 21, 22, 25, 28, 
    29, 30, 35, 37, 39, 1, 9, 13, 15, 17, 20, 21, 
    22, 23, 25, 28, 29, 31, 34, 39, 0, 2, 3, 5, 
    6, 7, 8, 13, 20, 21, 25, 28, 29, 30, 31, 33, 
    36, 37, 3, 5, 10, 14, 15, 17, 24, 27, 28, 29, 
    34, 37, 3, 4, 9, 10, 12, 14, 15, 19, 21, 23, 
    28, 31, 34, 37, 0, 1, 2, 4, 5, 16, 22, 26, 
    27, 30, 32, 37, 38, 7, 8, 15, 16, 17, 18, 23, 
    28, 29, 32, 37, 38, 3, 5, 6, 7, 9, 10, 16, 
    20, 21, 22, 28, 29, 38, 0, 8, 13, 17, 18, 28, 
    29, 30, 31, 34, 38, 39, 1, 2, 3, 5, 11, 14, 
    15, 16, 24, 25, 26, 28, 34, 38, 4, 8, 22, 27, 
    30, 34, 37, 1, 2, 3, 6, 8, 9, 11, 12, 14, 
    15, 17, 21, 25, 31, 35, 5, 6, 12, 13, 16, 17, 
    21, 24, 25, 27, 28, 30, 33, 35, 37, 38, 39, 1, 
    10, 15, 16, 23, 26, 36, 37, 0, 3, 5, 12, 13, 
    17, 18, 21, 23, 25, 26, 27, 28, 29, 30, 33, 35, 
    37, 38, 39, 3, 5, 8, 10, 20, 21, 27, 37, 1, 
    3, 5, 7, 9, 10, 20, 21, 26, 31, 34, 36, 39, 
    0, 2, 3, 10, 12, 13, 15, 17, 20, 21, 23, 25, 
    27, 30, 32, 34, 37, 39, 8, 11, 12, 13, 19, 22, 
    25, 33, 35, 37, 38, 3, 4, 5, 9, 13, 16, 20, 
    22, 24, 27, 30, 33, 36, 38, 0, 1, 2, 3, 9, 
    12, 15, 17, 18, 21, 22, 23, 27, 29, 30, 35, 37, 
    39, 0, 5, 8, 21, 24, 30, 33, 34, 35, 38, 39, 
    0, 1, 4, 5, 6, 7, 10, 11, 18, 19, 24, 29, 
    35
};

const int32_t weight_2_indptr[] CSR_PROGMEM = {
    0, 19, 31, 44, 54, 68, 78, 86, 94, 105, 115, 126, 
    141, 150, 162, 181, 193, 202, 221, 236, 254, 266, 280, 293, 
    305, 318, 330, 344, 351, 366, 383, 391, 411, 419, 432, 450, 
    461, 475, 493, 504, 517
};

// bias_2 - CSR形式
// 元サイズ: 40, 非ゼロ要素: 40, 圧縮率: 0.0%
const float bias_2_values[] CSR_PROGMEM = {
    -0.39445895f, -0.00774770f, -0.14067984f, -0.04337126f, -0.06753292f, -0.12362956f, -0.04233071f, -0.00664610f, 
    -0.14951168f, -0.00675502f, -0.11554569f, -0.01860372f, -0.01753227f, -0.14157945f, 0.09040919f, -0.04518206f, 
    -0.00740253f, -0.22952646f, -0.09990953f, -0.08791324f, -0.14938736f, -0.01451900f, -0.14695680f, -0.13690709f, 
    -0.05321294f, -0.19955930f, -0.10688235f, -0.12690544f, -0.08977877f, 0.09248850f, -0.02467123f, 0.14974633f, 
    -0.11384325f, -0.23447928f, 0.31711876f, -0.01190709f, -0.14670500f, 0.33143359f, -0.08829498f, -0.13420226f
};

const int32_t bias_2_indices[] CSR_PROGMEM = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
    12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
    24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
    36, 37, 38, 39
};

// weight_3 - CSR形式
// 元サイズ: 120, 非ゼロ要素: 42, 圧縮率: 65.0%
const float weight_3_values[] CSR_PROGMEM = {
    1.32735646f, -1.58677912f, -0.53519589f, 0.00200171f, -0.65074074f, -0.00201584f, -1.09212971f, -0.00238934f, 
    0.00156150f, -0.03327101f, 0.00264182f, -0.89055431f, 0.11110474f, 0.72513407f, 0.40794015f, 0.00183197f, 
    -0.19878855f, -0.51602185f, 0.81145746f, -0.00186403f, 1.50887060f, 0.00427480f, -0.61394805f, -0.53730309f, 
    0.00155422f, 0.35913840f, -0.00272208f, 0.00280169f, 0.34690225f, -0.00247218f, -0.07206321f, 0.00271083f, 
    0.57537210f, 0.17250122f, -0.33884630f, 0.00215534f, 0.47733417f, 0.28782004f, -1.69102943f, 0.00200962f, 
    1.13102198f, 0.00181044f
};

const int32_t weight_3_indices[] CSR_PROGMEM = {
    0, 4, 11, 12, 14, 15, 17, 22, 27, 29, 30, 31, 
    34, 37, 0, 3, 4, 11, 14, 15, 17, 18, 29, 34, 
    35, 37, 38, 39, 0, 1, 4, 10, 11, 14, 17, 25, 
    29, 31, 34, 35, 37, 39
};

const int32_t weight_3_indptr[] CSR_PROGMEM = {
    0, 14, 28, 42
};

// bias_3 - CSR形式
// 元サイズ: 3, 非ゼロ要素: 3, 圧縮率: 0.0%
const float bias_3_values[] CSR_PROGMEM = {
    0.60721558f, 0.13240419f, -0.05732125f
};

const int32_t bias_3_indices[] CSR_PROGMEM = {
    0, 1, 2
};

// CSR形式のデータ構造
typedef struct {
    const float* values;
    const int32_t* indices;
    const int32_t* indptr;
    int32_t nnz;
    int32_t rows;
    int32_t cols;
} csr_matrix_t;

typedef struct {
    const float* values;
    const int32_t* indices;
    int32_t nnz;
    int32_t size;
} csr_vector_t;


const csr_matrix_t weight_1_csr = {
    weight_1_values,
    weight_1_indices,
    weight_1_indptr,
    73,
    40,
    3
};

const csr_vector_t bias_1_csr = {
    bias_1_values,
    bias_1_indices,
    40,
    40
};

const csr_matrix_t weight_2_csr = {
    weight_2_values,
    weight_2_indices,
    weight_2_indptr,
    517,
    40,
    40
};

const csr_vector_t bias_2_csr = {
    bias_2_values,
    bias_2_indices,
    40,
    40
};

const csr_matrix_t weight_3_csr = {
    weight_3_values,
    weight_3_indices,
    weight_3_indptr,
    42,
    3,
    40
};

const csr_vector_t bias_3_csr = {
    bias_3_values,
    bias_3_indices,
    3,
    3
};

// CSR形式から値を取得するヘルパー関数
#ifdef ARDUINO
#define READ_PROGMEM_FLOAT(addr) pgm_read_float(addr)
#define READ_PROGMEM_DWORD(addr) pgm_read_dword(addr)
#else
#define READ_PROGMEM_FLOAT(addr) (*(addr))
#define READ_PROGMEM_DWORD(addr) (*(addr))
#endif

// CSR行列から値を取得
static inline float get_csr_weight(const csr_matrix_t* csr, int row, int col) {
    int32_t start = READ_PROGMEM_DWORD(&csr->indptr[row]);
    int32_t end = READ_PROGMEM_DWORD(&csr->indptr[row + 1]);
    
    for (int32_t i = start; i < end; i++) {
        if (READ_PROGMEM_DWORD(&csr->indices[i]) == col) {
            return READ_PROGMEM_FLOAT(&csr->values[i]);
        }
    }
    return 0.0f;  // スパース要素は0
}

// CSRベクトルから値を取得
static inline float get_csr_bias(const csr_vector_t* csr, int index) {
    for (int32_t i = 0; i < csr->nnz; i++) {
        if (READ_PROGMEM_DWORD(&csr->indices[i]) == index) {
            return READ_PROGMEM_FLOAT(&csr->values[i]);
        }
    }
    return 0.0f;  // スパース要素は0
}

#endif // MODEL_PARAMETERS_CSR_H
